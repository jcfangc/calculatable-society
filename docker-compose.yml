services:
  backend:
    privileged: true # 启用特权模式
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/backend_app
    networks:
      - dev-network
    ports:
      - "8000:8000"
    command: [ "tail", "-f", "/dev/null" ] # 保持容器运行
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_NAME: ${POSTGRES_DB}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - postgresql # 确保后端在数据库启动后再运行
      - redis # 确保后端在 Redis 启动后再运行

  frontend:
    privileged: true # 启用特权模式
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/frontend_app
      - /frontend_app/node_modules # 防止 node_modules 被覆盖
    networks:
      - dev-network
    ports:
      - "5173:5173" # 前端 Vite 开发服务器默认端口
      - "5174:5174" # 避免端口冲突
    command: [ "tail", "-f", "/dev/null" ] # 保持容器运行
    environment:
      NODE_ENV: ${NODE_ENV}

  postgresql:
    build:
      context: ./database # 自定义的 Dockerfile 目录
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    hostname: ${DATABASE_HOST}
    volumes:
      - ./database/data:/var/lib/postgresql/data
      - ./database/logs:/var/log/postgresql # 挂载日志目录
      - ./database/init-scripts:/docker-entrypoint-initdb.d/
    networks:
      - dev-network
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:${DATABASE_PORT}"

  redis:
    build:
      context: ./redis # 指定自定义 Dockerfile 的上下文目录
    hostname: ${REDIS_HOST}
    volumes:
      - ./redis/data:/data # 持久化数据目录
      - ./redis/conf/redis.conf:/usr/local/etc/redis/redis.conf # 挂载自定义配置
    networks:
      - dev-network
    ports:
      - "6379:${REDIS_PORT}" # Redis 默认端口
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD} # 从 .env 文件获取密码
    entrypoint:
      - sh
      - -c
      - >
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf && echo "bind 0.0.0.0" >> /usr/local/etc/redis/redis.conf && echo "pidfile \"\"" >> /usr/local/etc/redis/redis.conf && redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ] # 带密码的健康检查
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  dev-network:
    driver: bridge
